image: python:3.7
default:
  tags:
    - dsci-share

stages:
  - lint
  - test
  - dast
  # - build
  - security
  - release

# exclude these stages when pipeline == "latest"
include:
  - project: 'nielsen-media/cybersecurity/product-security/gold-config'
    ref: main
    file: Security.NLSN/security.nlsn.yml
    rules:
      - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
  - template: Jobs/Dependency-Scanning.latest.gitlab-ci.yml
    rules:
      - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
  - template: Jobs/Dependency-Scanning.latest.gitlab-ci.yml
    rules:
      - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
  - template: Jobs/Dependency-Scanning.latest.gitlab-ci.yml
    rules:
      - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'

linting:
  only: [ branches, merge_requests ]
  stage: lint
  script:
    - pip install --upgrade pip setuptools
    - pip install --upgrade -r test-requirements.txt
    - pre-commit install
    - echo "Checking code formatting..."
    - black nlsn --check --no-color

check-docstrings:
  stage: lint
  script:
    - pip install --upgrade pip setuptools
    - pip install --upgrade -r test-requirements.txt
    - pre-commit install
    - echo "Checking if code adheres to docstring conventions..."
    - pre-commit run pydocstyle --files *
  allow_failure: true
#  rules:
#    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'

check-code-style:
  stage: lint
  script:
    - pip install --upgrade pip setuptools
    - pip install --upgrade -r test-requirements.txt
    - pre-commit install
    - echo "Checking if code adheres to linting conventions..."
    - pre-commit run pylint --files *
  allow_failure: true

tests_spark_32:
  only: [ branches, merge_requests ]
  image: "registry.gitlab.com/nielsen-media/dsci/dsciint/dsci-imedia-methods/star/orchestrator/starlib-pyspark3.2/master:latest"
  stage: test
  script:
    - export PYTHON_PATH=/usr/local/lib/python3.7/
    - echo PYSPARK_PYTHON $PYSPARK_PYTHON
    - echo PYSPARK_DRIVER_PYTHON $PYSPARK_DRIVER_PYTHON
    - echo PYTHON_PATH $PYTHON_PATH
    - env
    - python -m pip install --upgrade pip
    - python -m pip install --upgrade -r test-requirements.txt
    - pip3 install pyspark==3.2.0
    - python -m pip install -e .["full"]
    - python -m pytest -v --cov-report term-missing --cov=nlsn/nebula --cov-report html:cov_html --cov-report xml:report.xml --junitxml=report.xml
    - coverage xml
  coverage: /TOTAL.*\s+(\d+%)$/
  artifacts:
    when: always
    reports:
      junit: report.xml
      coverage_report:
        path: report.xml
        coverage_format: cobertura
    paths:
      - dist/
      - cov_html/*
    expire_in: never

#pages:
#  stage: build
#  script:
#    - pip install --upgrade pip setuptools
#    - pip install --upgrade -r test-requirements.txt
#    - sphinx-build -b html docs public/docs
#  artifacts:
#    paths:
#      - public
#  rules:
#    - if: $CI_COMMIT_BRANCH == "main"

release_notes_creation:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  before_script:
    - apk add --no-cache python3 py3-pip
    - apk add --no-cache git
  script:
    - echo "running release_job"
  after_script:
    - git clone https://gitlab+deploy-token-2084288:KnQtzAKjUjJyCiQxr2-i@gitlab.com/nielsen-media/dsci/dsciint/dsci-gps/gitlab-release-notes.git
    - python3 -m pip install -r gitlab-release-notes/requirements.txt
    - python3 gitlab-release-notes/generate_release_notes.py --project_id=$CI_PROJECT_ID --to_tag=$CI_COMMIT_TAG --token=$CI_JOB_TOKEN_STAR --omit_orphan_mr --log_diff
  release:
    # See https://docs.gitlab.com/ee/ci/yaml/#release for available properties
    tag_name: '$CI_COMMIT_TAG'
    description: '$CI_COMMIT_TAG'
  rules:
    # - if: $CI_COMMIT_TAG # Run this job when any tag is
    - if: $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+.*/ # Run this job when tag is created in the format v19.0.1-whatever

variables:
  SAST_DEFAULT_ANALYZERS: bandit, secrets
